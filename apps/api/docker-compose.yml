version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: auth_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - auth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d auth_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API de autenticação
  api:
    build: .
    container_name: auth_api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: admin
      DB_PASS: admin
      DB_NAME: auth_db
      JWT_SECRET: sua-chave-secreta-super-segura-aqui-123456789
      ALLOWED_ORIGINS: http://localhost:3001,http://localhost:5173
      LOG_LEVEL: info
      LOG_FILE: true
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: auth_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - auth_network

volumes:
  postgres_data:
    driver: local

networks:
  auth_network:
    driver: bridge